# TikLocal - 本地媒体浏览器开发规则

这是一个基于Flask的本地媒体浏览器应用，提供类似TikTok的视频浏览体验和类似Pinterest的图片浏览体验。

## 项目架构与技术栈

### 后端技术栈
- **Flask**: 轻量级Python Web框架
- **Waitress**: 生产级WSGI服务器
- **Python 3.10+**: 主要开发语言

### 前端技术栈
- **Tailwind CSS v4**: 现代原子化CSS框架，提供响应式设计
- **原生JavaScript**: 保持轻量级，避免复杂依赖
- **Feather Icons**: 轻量级图标库
- **Hammer.js**: 触摸手势库，用于移动端交互

### 项目结构
```
tiklocal/
├── __init__.py          # 主Flask应用
├── templates/           # Jinja2模板文件
│   ├── base.html       # 基础模板
│   ├── tiktok.html     # TikTok样式视频浏览
│   ├── gallery.html    # Pinterest样式图片浏览
│   ├── browse.html     # 文件浏览器
│   └── ...
└── static/             # 静态资源
    ├── app.css         # 自定义样式和Tailwind配置
    ├── dark.css        # 暗色主题变量
    └── *.js            # JavaScript文件
```

## 开发原则

### 1. 简洁性原则
- **最小化依赖**: 仅使用必需的库，避免过度工程化
- **单文件架构**: 主要逻辑集中在`app.py`中，保持代码紧凑
- **原子化CSS**: 使用Tailwind的utility-first方法，保持样式简洁

### 2. 稳定性原则
- **错误处理**: 所有文件操作都要有适当的错误处理
- **路径安全**: 使用`Path`对象处理文件路径，防止路径遍历攻击
- **类型检查**: 验证MIME类型确保媒体文件的有效性
- **优雅降级**: 确保在各种环境下都能正常运行

### 3. 性能优化
- **CSS优化**: 利用Tailwind CSS v4的新引擎实现更快的构建
- **延迟加载**: 图片和视频采用延迟加载策略
- **分页处理**: 大量文件使用分页避免内存溢出
- **缓存策略**: 适当使用浏览器缓存和服务器缓存

### 4. 用户体验原则
- **响应式设计**: 使用Tailwind的响应式工具类
- **触摸友好**: 移动端优先的交互设计
- **主题支持**: 使用CSS变量和Tailwind的暗色模式
- **快捷操作**: 提供收藏、删除等常用功能


## 性能优化

### CSS优化
- 使用Tailwind CSS v4的新引擎实现更快的构建速度
- 使用自定义CSS变量实现主题切换
- 避免不必要的样式重复

### JavaScript优化
- 使用Intersection Observer API实现图片懒加载
- 利用CSS transforms和transitions创建流畅动画
- 事件委托减少事件监听器数量

## 部署与维护

### 开发环境
```bash
# 安装Python依赖
poetry install
poetry run tiklocal /path/to/media

# 或使用虚拟环境
python -m venv env
source env/bin/activate  # Linux/Mac
pip install -r requirements.txt
```

遵循以上规则，确保TikLocal应用使用Tailwind CSS v4实现现代化、高性能的用户界面，保持简洁、稳定、交互友好的特性。 